//name-kartikesh Raghunath Ambavade
//Roll_no - SYITA101
#include <stdio.h>
#include <stdlib.h>

struct info* create();
void add(int,struct info*);
void display(struct info*);
void InsertM(int,struct info*);
struct info* InsertE(struct info*);
struct info* delfirst(struct info*);
struct info*dellast(struct info*);
struct info*delM(struct info*,int );
struct info*reverse(struct info*);
struct info 
{
  int data;
  struct info*prv,*next;
};

int main(void) {
  int n;
  int e;
  int a,position;
  char ch;
  
  struct info*head;
  do{
    printf("Enter your choice :\n1.create\n2.Add member\n3.AddM\n4.AddL\n5.deleteS\n6.deleteL\n7.deleteM\n8.reverse\n9.display\n");
    scanf("%d",&a);

    switch(a)
    {
      case 1:
      {
         printf("\nCreating first node :\n");
        head=create();
        
        break;
       
      }

      case 2:
      {
         printf("\nEnter the number of nodes to add :");
         scanf("%d",&n);
         printf("\nAdding nodes :\n");
         add(n,head);
          break;

      }

      case 3:
      {    
      printf("\nEnter the data after the insertion take place :");
      scanf("%d",&e);
      InsertM(e,head);
       
        break;
      }

      case 4:
      {
        printf("\n Insert data at end : ");
        InsertE(head);
        break;
      }

      case 5:
      {
        
        head = delfirst(head);
        printf("\nDeletion of first node:\n");
        
        break;
      }
      

      case 6:
      {  
        
        head= dellast(head);
        printf("\nDeletion of last node:\n");
        break;
      }
      case 7:
      {
        printf("\nEnter the position to be deleted:");
        scanf("\n%d",&position);
        head = delM(head,position);
       break;
      }

      case 8:
      {
      head = reverse(head);
      
      
        break;
      }

      case 9:
      {
        display(head);
        break;
      }
      
    }
  printf("Do you want to continue (y/n)");
      scanf("%s",&ch);
  }while(ch == 'y');
  return 0;
}

struct info* create()
{
  struct info*head;
  head=(struct info*)malloc(sizeof(struct info));
  printf("Enter data :");
  scanf("%d",&head->data);
  head->next=NULL;
  head->prv=NULL;
  return head;

}
void add(int n,struct info*head)
{
 struct info*temp,*head1;
 head1=head;
 for(int i=0;i<n;i++)
 {
   temp=(struct info*)malloc(sizeof(struct info));
   printf("\nEnter data :");
   scanf("%d",&temp->data);
   head->next=temp;
   temp->prv=head;
   temp->next=NULL;
   head=head->next;
 }
}

void display(struct info*head)
{
  while(head!=NULL)
  {
    printf("%d\n",head->data);
    head=head->next;
  }
}

void InsertM(int e,struct info*head)
{
  struct info*temp,*p,*q;
  q=head;
  temp=(struct info*)malloc(sizeof(struct info));
  printf("\nEnter data :");
  scanf("%d",&temp->data);
  temp->next=NULL;
  temp->prv=NULL;
  while(e!=head->data)
  {
    head = head->next;
  }
  p=head->next;
  temp->next=p;
  temp->prv=head;
  head->next=temp;
  p->prv=temp;
  printf("\nData after inserting a node in middle:\n");
  display(q);
}

struct info* InsertE(struct info*head)
{
  struct info*temp,*p;
  temp=(struct info*)malloc(sizeof(struct info));
  printf("\nEnter data:");
  scanf("%d",&temp->data);
  temp->prv=NULL;
  
  p=head;
  while( p->next!=NULL )
  {
    p=p->next;
  }
  
  temp->prv=p;
  temp->next=NULL;
  p->next=temp;
return p;  

}

struct info* delfirst(struct info*head)
{
  struct info*temp = head;
  head=head->next;
  free(temp);
  temp = NULL;
  head->prv=NULL;
  return head;

}

struct info*dellast(struct info*head)
{
  struct info*temp=head;
  struct info*temp2;
  while(temp->next != NULL)
  {
    temp = temp->next;
  }
  temp2=temp->prv;
  temp2->next=NULL;
  free(temp);
  return head;
}

struct info*delM(struct info* head,int position)
{
  struct info*temp=head;
  struct info*temp2 = NULL;
  if(position == 1)
  {
    head = delfirst(head);
    return head;
  }

  while(position > 1)
  {
    temp= temp->next;
    position--;
  }

  if (temp->next==NULL)
  {
    head=dellast(head);
  }
  else
  {
    temp2=temp->prv;
    temp2->next=temp->next;
    temp->next->prv=temp2;
    free(temp);
    temp=NULL;
  }
  return head;
}

struct info*reverse(struct info*head)
{
 struct info*ptr1 =head;
 struct info*ptr2 = ptr1->next;

 ptr1->next = NULL;
 ptr1->prv = ptr2;
  
  while(ptr2!=NULL)
  {
    ptr2->prv=ptr2->next;
    ptr2->next=ptr1;
    ptr1=ptr2;
    ptr2=ptr2->prv;
  }

  head=ptr1;
  return head;

}